import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Calculator extends JFrame implements ActionListener {
    private JTextField display;
    private StringBuilder input;

    public Calculator() {
        input = new StringBuilder();

        // Frame settings
        setTitle("Calculator");
        setSize(400, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Display field
        display = new JTextField();
        display.setEditable(false);
        display.setFont(new Font("Arial", Font.BOLD, 30));
        add(display, BorderLayout.NORTH);

        // Panel for buttons
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(6, 4, 5, 5));

        // Adding buttons to panel
        String[] buttons = {
            "7", "8", "9", "/",
            "4", "5", "6", "*",
            "1", "2", "3", "-",
            "0", ".", "=", "+",
            "&&", "||", "!", "==",
            ">", "<", "&", "|",
            "^", "~", "(", ")"
        };

        for (String text : buttons) {
            JButton button = new JButton(text);
            button.setFont(new Font("Arial", Font.BOLD, 20));
            button.addActionListener(this);
            panel.add(button);
        }

        add(panel, BorderLayout.CENTER);
    }

    public static void main(String[] args) {
        Calculator calculator = new Calculator();
        calculator.setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String command = e.getActionCommand();
        try {
            switch (command) {
                case "=":
                    String result = evaluateExpression(input.toString());
                    display.setText(result);
                    input.setLength(0);
                    break;
                case "C":
                    input.setLength(0);
                    display.setText("");
                    break;
                default:
                    input.append(command);
                    display.setText(input.toString());
                    break;
            }
        } catch (Exception ex) {
            display.setText("Error");
            input.setLength(0);
        }
    }

    private String evaluateExpression(String expression) {
        // In a real scenario, you would use an expression parser library or write a custom parser.
        // For simplicity, this example uses JavaScript engine for evaluation.
        try {
            javax.script.ScriptEngineManager mgr = new javax.script.ScriptEngineManager();
            javax.script.ScriptEngine engine = mgr.getEngineByName("JavaScript");
            return engine.eval(expression).toString();
        } catch (Exception e) {
            return "Error";
        }
    }
}
